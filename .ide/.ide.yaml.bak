version: smartide/v0.2
orchestrator:
  type: docker-compose
  version: 3
workspace:
  dev-container:
    service-name: metersphere-dev
    ports:
      tools-webide-idea: 6800
      tools-ssh: 6822
      apps-metersphere: 8080
    ide-type: jb-projector
    volumes:
      git-config: true
      ssh-key: true
  services:
    metersphere-dev:
      image: registry.cn-hangzhou.aliyuncs.com/smartide/smartide-java-v2-jetbrains-idea-vmlc:latest
      runtime: sysbox-runc
      hostname: dev
      restart: always
      environment:
        POSTGRES_HOST_AUTH_METHOD: trust
        ROOT_PASSWORD: root123
        LOCAL_USER_PASSWORD: root123
      volumes:
        - .:/home/project
        - ./.ide/opt/metersphere:/opt/metersphere
        - $HOME/.m2/repository:/home/smartide/.m2/repository
      ports:
        - 8080:8080
        - 6822:22
        - 6800:8887
      networks:
        - smartide-network
    mysql:
      image: registry.cn-qingdao.aliyuncs.com/metersphere/mysql:5.7.33
      container_name: mysql
      healthcheck:
        test:
          [
            "CMD",
            "mysqladmin",
            "ping",
            "-h",
            "localhost",
            "-uroot",
            "-pPassword123@mysql",
          ]
        interval: 6s
        timeout: 5s
        retries: 10
      environment:
        MYSQL_DATABASE: metersphere
        MYSQL_ROOT_PASSWORD: Password123@mysql
      ports:
        - 3306:3306
      volumes:
        - ./.ide/opt/metersphere/conf/my.cnf:/etc/mysql/conf.d/my.cnf
        - ./.ide/opt/metersphere/bin/mysql:/docker-entrypoint-initdb.d/
        - ms-mysql-data:/var/lib/mysql
      networks:
        - smartide-network
    redis:
      image: registry.cn-qingdao.aliyuncs.com/metersphere/redis:6.2.6
      container_name: redis
      healthcheck:
        test: [ "CMD", "redis-cli", "ping" ]
        interval: 6s
        timeout: 5s
        retries: 10
      ports:
        - ${MS_REDIS_PORT}:6379
      volumes:
        - ${MS_BASE}/metersphere/conf/redis.conf:/etc/redis/redis.conf
        - ms-redis-data:/data
      command: redis-server /etc/redis/redis.conf --requirepass ${MS_REDIS_PASSWORD}
      networks:
        - ms-network
      restart: always
    ms-data-streaming:
      image: registry.cn-qingdao.aliyuncs.com/metersphere/ms-data-streaming:v1.20.5-lts
      container_name: ms-data-streaming
      environment:
        HOST_HOSTNAME: $HOSTNAME
        SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/metersphere?autoReconnect=false&useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8&zeroDateTimeBehavior=convertToNull&allowPublicKeyRetrieval=true&useSSL=false
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: Password123@mysql
        KAFKA_PARTITIONS: 4
        KAFKA_REPLICAS: 1
        KAFKA_TOPIC: JMETER_METRICS
        KAFKA_LOG_TOPIC: JMETER_LOGS
        KAFKA_TEST_TOPIC: LOAD_TESTS
        KAFKA_REPORT_TOPIC: JMETER_REPORTS
        KAFKA_BOOTSTRAP-SERVERS: 10000-10010:10000-10010
      depends_on:
        - kafka
      healthcheck:
        test: ["CMD", "nc", "-zv", "localhost", "8084"]
        interval: 6s
        timeout: 10s
        retries: 20
      restart: on-failure
      volumes:
        - ./.ide/opt/conf/metersphere/metersphere.properties:/opt/metersphere/conf/metersphere.properties
        - ./.ide/opt/metersphere/logs/data-streaming:/opt/metersphere/logs/data-streaming
      networks:
        - smartide-network
    kafka:
      image: "registry.cn-qingdao.aliyuncs.com/metersphere/kafka:2"
      container_name: kafka
      ports:
        - "19092:19092"
      healthcheck:
        test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper"]
        interval: 6s
        timeout: 10s
        retries: 20
      restart: on-failure
      volumes:
        - "ms-kafka-data:/bitnami"
      environment:
        KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
        KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://:19092
        KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://10.0.0.4:19092
        KAFKA_CFG_LOG_RETENTION_HOURS: 64
        KAFKA_CFG_MAX_REQUEST_SIZE: 52428800
        KAFKA_CFG_MESSAGE_MAX_BYTES: 52428800
        KAFKA_CFG_REPLICA_FETCH_MAX_BYTES: 52428800
        KAFKA_CFG_FETCH_MESSAGE_MAX_BYTES: 52428800
        KAFKA_CFG_PARTITION_FETCH_BYTES: 52428800
      depends_on:
        - zookeeper
      networks:
        - smartide-network
    zookeeper:
      image: "registry.cn-qingdao.aliyuncs.com/metersphere/zookeeper:3"
      container_name: zookeeper
      healthcheck:
        test: ["CMD", "zkCli.sh", "stat", "/"]
        interval: 6s
        timeout: 10s
        retries: 20
      volumes:
        - "ms-zookeeper-data:/bitnami"
      environment:
        ALLOW_ANONYMOUS_LOGIN: "yes"
      networks:
        - smartide-network
    ms-node-controller:
      image: registry.cn-qingdao.aliyuncs.com/metersphere/ms-node-controller:v1.20.5-lts
      container_name: ms-node-controller
      environment:
        HOST_HOSTNAME: $HOSTNAME
      ports:
        - 8082:8082
        - 9100:9100
      healthcheck:
        test: ["CMD", "nc", "-zv", "localhost", "8082"]
        interval: 6s
        timeout: 5s
        retries: 10
      volumes:
        - ms-conf:/opt/metersphere/conf
        - ms-data:/opt/metersphere/data
        - ms-logs:/opt/metersphere/logs
        - /var/run/docker.sock:/var/run/docker.sock
      mem_limit: 1024m
      networks:
        - smartide-network
    nodeexporter:
      image: registry.cn-qingdao.aliyuncs.com/metersphere/node-exporter:latest
      container_name: nodeexporter
      user: root
      privileged: true
      volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
      command:
        - "--path.procfs=/host/proc"
        - "--path.sysfs=/host/sys"
        - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
      restart: unless-stopped
      healthcheck:
        test: ["CMD", "nc", "-zv", "localhost", "9100"]
        interval: 6s
        timeout: 5s
        retries: 10
      network_mode: service:ms-node-controller
    prometheus:
      image: registry.cn-qingdao.aliyuncs.com/metersphere/prometheus:latest
      container_name: ms-prometheus
      volumes:
        - ms-prometheus-conf:/etc/prometheus/
        - ms-prometheus-data:/prometheus
      command:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.path=/prometheus"
        - "--web.console.libraries=/etc/prometheus/console_libraries"
        - "--web.console.templates=/etc/prometheus/consoles"
        - "--storage.tsdb.retention=200h"
        - "--web.enable-lifecycle"
      restart: unless-stopped
      expose:
        - 9090
      ports:
        - 9090:9090
      healthcheck:
        test: ["CMD", "nc", "-zv", "localhost", "9090"]
        interval: 6s
        timeout: 5s
        retries: 10
      networks:
        - smartide-network
  networks:
    smartide-network:
      driver: bridge
      ipam:
        driver: default
        config:
          - subnet: 172.30.10.0/24
  volumes:
    ms-zookeeper-data:
      driver_opts:
        type: none
        device: ./.ide/opt/metersphere/data/zookeeper
        o: bind
    ms-kafka-data:
      driver_opts:
        type: none
        device: ./.ide/opt/metersphere/data/kafka
        o: bind
    ms-mysql-data:
      driver_opts:
        type: none
        device: ./.ide/opt/metersphere/data/mysql
        o: bind
    ms-redis-data:
      driver_opts:
        type: none
        device: ./.ide/opt/metersphere/data/redis
        o: bind
    ms-prometheus-data:
      driver_opts:
        type: none
        device: ./.ide/opt/metersphere/data/prometheus
        o: bind
    ms-prometheus-conf:
      driver_opts:
        type: none
        device: ./.ide/opt/metersphere/conf/prometheus
        o: bind
    ms-conf:
      driver_opts:
        type: none
        device: ./.ide/opt/metersphere/conf
        o: bind
    ms-logs:
      driver_opts:
        type: none
        device: ./.ide/opt/metersphere/logs
        o: bind
    ms-data:
      driver_opts:
        type: none
        device: ./.ide/opt/metersphere/data
        o: bind
